// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User system with role-based access control
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  name          String
  role          UserRole @default(TECHNICIAN)
  technicianId  String?  @unique // Link to technician profile if role is TECHNICIAN
  phone         String?
  avatar        String? // URL to profile image
  lastLoginAt   DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  technician    Technician? @relation("TechnicianUser", fields: [technicianId], references: [id])

  @@map("users")
}

enum UserRole {
  ADMIN
  FINANCE
  TECHNICIAN
}

// Admin user for system management (deprecated, use User model instead)
model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Technicians (both freelance and permanent)
model Technician {
  id        String   @id @default(cuid())
  name      String
  phone     String
  address   String
  type      TechnicianType @default(FREELANCE)
  expertise String?
  experienceYears Int? @default(0)
  skills    String? // JSON array of skills
  bio       String? // Professional biography
  avatar    String? // Profile photo URL
  rating    Float? @default(0) // Average rating from completed jobs
  totalJobs Int? @default(0) // Total completed assignments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user                User? @relation("TechnicianUser")
  leadAssignments     Assignment[] @relation("LeadTechnician")
  assistantAssignments AssignmentAssistant[]
  serviceCostTemplates ServiceCostTemplate[]
  workHistory         TechnicianWorkHistory[]

  @@map("technicians")
}

enum TechnicianType {
  FREELANCE
  PERMANENT
}

// Clients
model Client {
  id            String   @id @default(cuid())
  name          String
  contactPerson String?
  phone         String
  address       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  assignments Assignment[]
  workHistories TechnicianWorkHistory[]

  @@map("clients")
}

// Service Types
model ServiceType {
  id          String   @id @default(cuid())
  name        String
  category    String
  description String?
  price       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assignments Assignment[]
  serviceCostTemplates ServiceCostTemplate[]
  workHistories TechnicianWorkHistory[]

  @@map("service_types")
}

// Service Equipment
model ServiceEquipment {
  id            String   @id @default(cuid())
  name          String
  unit          String   @default("unit")
  stockQuantity Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  assignmentEquipment AssignmentEquipment[]

  @@map("service_equipment")
}

// Service Cost Templates (costs paid to technicians)
model ServiceCostTemplate {
  id                      String   @id @default(cuid())
  serviceTypeId           String
  technicianId            String
  technicianFee           Float
  transportCost           Float    @default(0)
  accommodation           Float    @default(0)
  incidentalEquipmentCost Float    @default(0)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  serviceType ServiceType @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)
  technician Technician @relation(fields: [technicianId], references: [id], onDelete: Cascade)

  @@unique([serviceTypeId, technicianId])
  @@map("service_cost_templates")
}

// Assignments (core feature)
model Assignment {
  id                String         @id @default(cuid())
  clientId          String
  serviceTypeId     String
  leadTechnicianId  String
  startDate         DateTime
  endDate           DateTime
  status            AssignmentStatus @default(PENDING)
  notes             String?
  documentation     String? // JSON array of file paths
  totalCost         Float          @default(0)
  manualCostOverride Boolean        @default(false)
  workLocation      String?        // Alamat lengkap lokasi pekerjaan
  latitude          Float?         // Koordinat latitude lokasi pekerjaan
  longitude         Float?         // Koordinat longitude lokasi pekerjaan
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  client          Client          @relation(fields: [clientId], references: [id])
  serviceType     ServiceType     @relation(fields: [serviceTypeId], references: [id])
  leadTechnician  Technician      @relation("LeadTechnician", fields: [leadTechnicianId], references: [id])
  assistants      AssignmentAssistant[]
  equipment       AssignmentEquipment[]
  reports         Report[]
  workHistories   TechnicianWorkHistory[]

  @@map("assignments")
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Assignment Assistants (many-to-many relationship)
model AssignmentAssistant {
  id           String @id @default(cuid())
  assignmentId String
  technicianId String

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  technician Technician @relation(fields: [technicianId], references: [id])

  @@unique([assignmentId, technicianId])
  @@map("assignment_assistants")
}

// Assignment Equipment (many-to-many with quantity)
model AssignmentEquipment {
  id           String @id @default(cuid())
  assignmentId String
  equipmentId  String
  quantity     Int    @default(1)

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  equipment  ServiceEquipment @relation(fields: [equipmentId], references: [id])

  @@unique([assignmentId, equipmentId])
  @@map("assignment_equipment")
}

// Work Reports
model Report {
  id                   String         @id @default(cuid())
  assignmentId         String
  reportDate           DateTime
  workStartTime        String?
  workEndTime          String?
  weatherCondition     String?
  locationDescription  String?
  workSummary          String?
  findings             String?
  recommendations      String?
  nextSteps            String?
  photos               String? // JSON array of photo objects
  status               ReportStatus   @default(IN_PROGRESS)
  customerSignature    String?
  technicianSignature  String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("reports")
}

enum ReportStatus {
  IN_PROGRESS
  COMPLETED
  NEEDS_FOLLOWUP
}

// Technician Work History
model TechnicianWorkHistory {
  id               String   @id @default(cuid())
  technicianId     String
  clientId         String
  serviceTypeId    String
  assignmentId     String
  startDate        DateTime
  endDate          DateTime
  jobDescription   String
  performanceRating Float? @default(0) // 1-5 rating
  clientFeedback   String?
  totalEarnings    Float?  // Total amount earned for this job
  status           WorkStatus @default(COMPLETED)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  technician  Technician  @relation(fields: [technicianId], references: [id])
  client      Client      @relation(fields: [clientId], references: [id])
  serviceType ServiceType @relation(fields: [serviceTypeId], references: [id])
  assignment  Assignment  @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("technician_work_history")
}

enum WorkStatus {
  COMPLETED
  IN_PROGRESS
  CANCELLED
}